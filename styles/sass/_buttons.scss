@function darkenBorder($color) {
    @return darken($color, 20%);
}

@function getFontColor($bgColor) {
    @if (lightness($bgColor) > 50%) {
        @return $dark;
    } @else {
        @return $white;
    }
}

.btn {
    padding: $spacing-sm $spacing-lg;
    margin-right: 0;
    border: none;
    border-radius: 50px;
    font-size: $font-size-sm;
    font-weight: $font-weight-medium;
    cursor: pointer;
    text-align: center;
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1) !important;
    white-space: nowrap;
    flex: 1;
    min-width: auto;
    max-width: none;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
    position: relative;
    overflow: hidden;

    &::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 10px;
        height: 10px;
        background: rgba(255, 255, 255, 0.3);
        opacity: 0;
        border-radius: 100%;
        transform: scale(1, 1) translate(-50%, -50%);
        transform-origin: 50% 50%;
    }

    &:active::after {
        animation: ripple 0.6s ease-out;
    }

    @keyframes ripple {
        0% {
            transform: scale(0, 0);
            opacity: 0.5;
        }
        100% {
            transform: scale(30, 30);
            opacity: 0;
        }
    }

    @media screen and (min-width: $breakpoint-sm) {
        padding: $spacing-sm $spacing-xl;
        font-size: $font-size-md;
    }

    @media screen and (min-width: $breakpoint-md) {
        padding: $spacing-md $spacing-xl;
        font-size: $font-size-md;
        margin-right: $spacing-lg;
    }

    @media screen and (min-width: $breakpoint-lg) {
        font-size: $font-size-lg;
    }

    &:hover {
        transform: translateY(-5px) !important;
        box-shadow: 0 7px 14px rgba(0, 0, 0, 0.2), 0 5px 5px rgba(0, 0, 0, 0.1) !important;
    }

    &:active {
        transform: translateY(-2px) !important;
    }

    @each $name, $color in $colors {
        &.btn-#{$name} {
            background: linear-gradient(135deg, $color, darken($color, 10%));
            color: getFontColor($color);

            // Effet de gradient animé au survol
            background-size: 200% 200%;
            background-position: 0% 0%;

            &:hover {
                background-position: 100% 100% !important;
                color: getFontColor($color) !important;
            }
        }
    }

    // Variante outline
    &.btn-outline {
        background: transparent;
        box-shadow: none;
        position: relative;
        z-index: 1;

        &::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 50px;
            z-index: -1;
            transition: all 0.3s ease;
            background: transparent;
            border: 2px solid;
        }

        @each $name, $color in $colors {
            &.btn-outline-#{$name} {
                color: $color;

                &::before {
                    border-color: $color;
                }

                &:hover {
                    color: getFontColor($color) !important;

                    &::before {
                        background: $color;
                    }
                }
            }
        }
    }

    // Bouton avec icône
    &.btn-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: $spacing-sm;

        i {
            font-size: 1.2em;
            transition: transform 0.3s ease;
        }

        &:hover i {
            transform: translateX(5px);
        }
    }
}
